name: Prod - test

on:
  workflow_dispatch:
  push:
    branches: [ main ]

concurrency: 
  group: ${{ github.workflow }}
  cancel-in-progress: true
  
env:
  REGISTRY: ghcr.io

jobs:
  paths-filter:
    name: Paths filters
    runs-on: ubuntu-latest
    outputs:
      alert-system-request: ${{ steps.filter.outputs.alert-system-request }}
      ble-sensors-2-mqtt: ${{ steps.filter.outputs.ble-sensors-2-mqtt }}
      data-panel-api: ${{ steps.filter.outputs.data-panel-api }}
      data-panel-autoload: ${{ steps.filter.outputs.data-panel-autoload }}
      data-panel-front: ${{ steps.filter.outputs.data-panel-front }}
      dns-updater: ${{ steps.filter.outputs.dns-updater }}
      heartbeat-monitor: ${{ steps.filter.outputs.heartbeat-monitor }}
      heartbeat-request: ${{ steps.filter.outputs.heartbeat-request }}
      hue-2-mqtt: ${{ steps.filter.outputs.hue-2-mqtt }}
      logger: ${{ steps.filter.outputs.logger }}
      logic-pool-hue: ${{ steps.filter.outputs.logic-pool-hue }}
      logic-pool-mqtt: ${{ steps.filter.outputs.logic-pool-mqtt }}
      logic-pool-time: ${{ steps.filter.outputs.logic-pool-time }}
      message-alert: ${{ steps.filter.outputs.message-alert }}
      mqtt-2-bigquery: ${{ steps.filter.outputs.mqtt-2-bigquery }}
      mqtt-2-hue: ${{ steps.filter.outputs.mqtt-2-hue }}
      telegram-bot: ${{ steps.filter.outputs.telegram-bot }}
      voice-alert: ${{ steps.filter.outputs.voice-alert }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          alert-system-request:
            - "alert-system-request/**"
          ble-sensors-2-mqtt:
            - "ble-sensors-2-mqtt/**"
          data-panel-api:
            - "data-panel-api/**"
          data-panel-autoload:
            - "data-panel-autoload/**"
          data-panel-front:
            - "data-panel-front/**"
          dns-updater:
            - "dns-updater/**"
          heartbeat-monitor:
            - "heartbeat-monitor/**"
          heartbeat-request:
            - "heartbeat-request/**"
          hue-2-mqtt:
            - "hue-2-mqtt/**"
          logger:
            - "logger/**"
          logic-pool-hue:
            - "logic-pool-hue/**"
          logic-pool-mqtt:
            - "logic-pool-mqtt/**"
          logic-pool-time:
            - "logic-pool-time/**"
          message-alert:
            - "message-alert/**"
          mqtt-2-bigquery:
            - "mqtt-2-bigquery/**"
          mqtt-2-hue:
            - "mqtt-2-hue/**"
          telegram-bot:
            - "telegram-bot/**"
          voice-alert:
            - "voice-alert/**"

  alert-system-request:
    name: Build and publish alert-system-request
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "alert-system-request"
    if: needs.paths-filter.outputs.alert-system-request == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest
  
  ble-sensors-2-mqtt:
    name: Build and publish ble-sensors-2-mqtt
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "ble-sensors-2-mqtt"
    if: needs.paths-filter.outputs.ble-sensors-2-mqtt == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  data-panel-api:
    name: Build and publish data-panel-api
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "data-panel-api"
    if: needs.paths-filter.outputs.data-panel-api == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  data-panel-autoload:
    name: Build and publish data-panel-autoload
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "data-panel-autoload"
    if: needs.paths-filter.outputs.data-panel-autoload == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  data-panel-front:
    name: Build and publish data-panel-front
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "data-panel-front"
    if: needs.paths-filter.outputs.data-panel-front == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  dns-updater:
    name: Build and publish dns-updater
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "dns-updater"
    if: needs.paths-filter.outputs.dns-updater == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  heartbeat-monitor:
    name: Build and publish heartbeat-monitor
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "heartbeat-monitor"
    if: needs.paths-filter.outputs.heartbeat-monitor == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  heartbeat-request:
    name: Build and publish heartbeat-request
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "heartbeat-request"
    if: needs.paths-filter.outputs.heartbeat-request == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  hue-2-mqtt:
    name: Build and publish hue-2-mqtt
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "hue-2-mqtt"
    if: needs.paths-filter.outputs.hue-2-mqtt == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  logger:
    name: Build and publish logger
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "logger"
    if: needs.paths-filter.outputs.logger == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  logic-pool-hue:
    name: Build and publish logic-pool-hue
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "logic-pool-hue"
    if: needs.paths-filter.outputs.logic-pool-hue == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  logic-pool-mqtt:
    name: Build and publish logic-pool-mqtt
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "logic-pool-mqtt"
    if: needs.paths-filter.outputs.logic-pool-mqtt == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  logic-pool-time:
    name: Build and publish logic-pool-time
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "logic-pool-time"
    if: needs.paths-filter.outputs.logic-pool-time == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  message-alert:
    name: Build and publish message-alert
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "message-alert"
    if: needs.paths-filter.outputs.message-alert == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  mqtt-2-bigquery:
    name: Build and publish mqtt-2-bigquery
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "mqtt-2-bigquery"
    if: needs.paths-filter.outputs.mqtt-2-bigquery == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  mqtt-2-hue:
    name: Build and publish mqtt-2-hue
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "mqtt-2-hue"
    if: needs.paths-filter.outputs.mqtt-2-hue == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  telegram-bot:
    name: Build and publish telegram-bot
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "telegram-bot"
    if: needs.paths-filter.outputs.telegram-bot == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  voice-alert:
    name: Build and publish voice-alert
    runs-on: ubuntu-latest
    needs: paths-filter
    permissions:
      contents: read
      packages: write
    env:
      SERVICE_NAME: "voice-alert"
    if: needs.paths-filter.outputs.voice-alert == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.SERVICE_NAME }}
          file: ${{ env.SERVICE_NAME }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/kikeelectronico/${{ env.SERVICE_NAME }}:latest

  deploy:
    name: Deploy to the server
    runs-on: ubuntu-latest
    needs: [alert-system-request, ble-sensors-2-mqtt, data-panel-api]
    if: ${{ always() && !failure() && !cancelled() }}
    steps:
      - name: Request update
        run: |
          curl --location --request POST '${{ secrets.DIP_URL }}' \
          --header 'Authorization: Bearer ${{ secrets.DIP_TOKEN }}'
